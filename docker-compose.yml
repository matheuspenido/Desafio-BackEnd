services:
  postgres-rent:
    image: postgres:14
    container_name: postgres_rent_container
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: MyRentMotorServiceDb
    ports:
      - "5432:5432"
    volumes:
      - postgres_rent_data:/var/lib/postgresql/data

  postgres-customer:
    image: postgres:14
    container_name: postgres_customer_container
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: MyCustomerServiceDb
    ports:
      - "5433:5432"
    volumes:
      - postgres_customer_data:/var/lib/postgresql/data

  postgres-motorcycle:
    image: postgres:14
    container_name: postgres_motorcycle_container
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: MyCustomerServiceDb
    ports:
      - "5434:5432"
    volumes:
      - postgres_motorcycle_data:/var/lib/postgresql/data

  myrentmotorservice.api:
    image: myrentmotorserviceapi:latest
    container_name: my_rental_motorcycle_service
    build:
      context: .
      dockerfile: MyRentMotorService/MyRentMotorService.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_HTTP_PORTS: "8080"
      ASPNETCORE_HTTPS_PORTS: "8081"
    ports:
      - "5000:8080"
      - "5001:8081"
      - "4020:4020"   
    depends_on:
      - postgres-rent
      - rabbitmq
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
  
  mymotorcycleservice.api:
    image: mymotorcycleserviceapi:latest
    container_name: my_motorcycle_service
    build:
      context: .
      dockerfile: MyMotorcycleService/MyMotorcycleService.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_HTTP_PORTS: "8080"
      ASPNETCORE_HTTPS_PORTS: "8081"
    ports:
      - "5002:8080"
      - "5003:8081"
      - "4021:4020" 
    depends_on:
      - postgres-motorcycle
      - rabbitmq
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro

  mycustomerservice.api:
    image: mycustomerserviceapi:latest
    container_name: my_customer_service
    build:
      context: .
      dockerfile: MyCustomerService.API/MyCustomerService.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_HTTP_PORTS: "8080"
      ASPNETCORE_HTTPS_PORTS: "8081"
      AWS_ACCESS_KEY_ID: ${BUCKET_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${BUCKER_AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
    ports:
      - "5004:8080"
      - "5005:8081"
      - "4022:4020" 
    depends_on:
      - postgres-customer
      - rabbitmq
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
  

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

volumes:
  postgres_rent_data:
  postgres_customer_data:
  postgres_motorcycle_data:
  rabbitmq_data: